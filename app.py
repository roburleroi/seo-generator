import streamlit as st
import google.generativeai as genai
import PyPDF2
import io
import os
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
import tempfile
import re
import textwrap
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound

# Configuration de l'API Gemini
GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
genai.configure(api_key=GEMINI_API_KEY)

def extract_text_from_pdf(pdf_file):
    """Extrait le texte d'un fichier PDF"""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        return text
    except Exception as e:
        st.error(f"Erreur lors de la lecture du PDF: {str(e)}")
        return None

def generate_article(full_prompt):
    """G√©n√®re un article avec l'API Gemini"""
    try:
        model = genai.GenerativeModel('gemini-2.5-flash')
        response = model.generate_content(contents=[full_prompt])
        return response.text
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration de l'article: {str(e)}")
        return None

# --- Suppression de la fonction generate_pdf et du rendu PDF ---
# (La fonction sera √† r√©√©crire plus tard avec une nouvelle logique de rendu)


def main():
    st.set_page_config(
        page_title="G√©n√©rateur d'Articles SEO",
        page_icon="üìù",
        layout="wide"
    )
    
    st.title("üìù G√©n√©rateur d'Articles SEO")
    st.markdown("---")
    
    # Sidebar pour les param√®tres
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        st.info("Le prompt utilis√© est optimis√© pour le freelancing et le SEO. Remplis les champs principaux dans l'interface.")
    
    # Zone principale
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìÑ Transcription vid√©o (PDF) ou contexte")
        input_method = st.radio(
            "Comment souhaitez-vous fournir la transcription ou le contexte ?",
            [
                "üìÅ Uploader un fichier PDF (transcription)",
                "‚úèÔ∏è Saisir le contexte manuellement",
                "üîó Entrer l'URL d'une vid√©o YouTube"
            ]
        )
        context = ""
        if input_method == "üìÅ Uploader un fichier PDF (transcription)":
            uploaded_file = st.file_uploader(
                "Choisissez un fichier PDF (transcription)",
                type=['pdf'],
                help="Le fichier PDF sera utilis√© comme transcription vid√©o."
            )
            if uploaded_file is not None:
                with st.spinner("Extraction du contenu du PDF..."):
                    context = extract_text_from_pdf(uploaded_file)
                if context:
                    st.success("‚úÖ Transcription extraite avec succ√®s !")
                    context = st.text_area("Transcription extraite (modifiable)", value=context, height=200)
                else:
                    st.error("‚ùå Impossible d'extraire le contenu du PDF")
        elif input_method == "‚úèÔ∏è Saisir le contexte manuellement":
            context = st.text_area(
                "Saisissez la transcription ou le contexte de votre article",
                height=200,
                placeholder="Collez ici la transcription vid√©o ou d√©crivez le contexte..."
            )
        elif input_method == "üîó Entrer l'URL d'une vid√©o YouTube":
            youtube_url = st.text_input(
                "Collez l'URL de la vid√©o YouTube",
                placeholder="https://www.youtube.com/watch?v=..."
            )
            if youtube_url:
                try:
                    match = re.search(r"(?:v=|youtu\.be/|embed/)([\w-]{11})", youtube_url)
                    if not match:
                        st.error("Impossible d'extraire l'ID de la vid√©o. Veuillez v√©rifier l'URL.")
                    else:
                        video_id = match.group(1)
                        ytt_api = YouTubeTranscriptApi()
                        fetched_transcript = ytt_api.fetch(video_id, languages=['fr', 'en'])
                        transcript_text = "\n".join([snippet.text for snippet in fetched_transcript])
                        st.success("‚úÖ Transcription extraite avec succ√®s !")
                        
                        # Affichage des 5 premi√®res lignes de la transcription
                        st.info("üìù **Aper√ßu des 5 premi√®res lignes de la transcription :**")
                        transcript_lines = transcript_text.split('\n')
                        preview_lines = transcript_lines[:5]
                        for i, line in enumerate(preview_lines, 1):
                            if line.strip():  # Ignorer les lignes vides
                                st.markdown(f"**{i}.** {line.strip()}")
                        
                        st.markdown("---")
                        context = st.text_area("Transcription compl√®te (modifiable)", value=transcript_text, height=200)
                except TranscriptsDisabled:
                    st.error("La transcription est d√©sactiv√©e pour cette vid√©o.")
                except NoTranscriptFound:
                    st.error("Aucune transcription trouv√©e pour cette vid√©o.")
                except Exception as e:
                    st.error(f"Erreur lors de la r√©cup√©ration de la transcription : {e}")
    
    with col2:
        st.subheader("üìù Sujet principal de l'article")
        article_topic = st.text_input(
            "Sujet principal",
            value="R√©gie ou Forfait : Quel Mode de Prestation Choisir en Freelance ?",
            help="D√©finissez le sujet principal de l'article."
        )
        st.subheader("üîë Mots-cl√©s SEO")
        keywords_input = st.text_area(
            "Liste des mots-cl√©s (un par ligne)",
            height=100,
            placeholder="mot-cl√© 1\nmot-cl√© 2\nmot-cl√© 3",
            help="Entrez un mot-cl√© par ligne pour optimiser l'article"
        )
        st.subheader("üìã Consignes particuli√®res")
        instructions = st.text_area(
            "Consignes sp√©cifiques pour la r√©daction",
            height=100,
            placeholder="Ex: ton formel, longueur 1500 mots, inclure des exemples concrets...",
            help="Donnez des instructions sp√©cifiques pour la r√©daction de l'article"
        )
    
    st.markdown("---")
    
    # Bouton de g√©n√©ration
    if st.button("üöÄ G√©n√©rer l'article", type="primary", use_container_width=True):
        # Le contexte n'est plus obligatoire
        if not article_topic:
            st.error("‚ùå Veuillez fournir un sujet principal")
            return
        if not keywords_input:
            st.warning("‚ö†Ô∏è Aucun mot-cl√© fourni - l'article ne sera pas optimis√© SEO")
        if not instructions:
            instructions = "Aucune consigne particuli√®re"
        # Construction du prompt personnalis√©
        full_prompt = f'''
Vous √™tes un r√©dacteur expert sp√©cialis√© dans la cr√©ation d'articles en fran√ßais sur le freelancing. Votre mission est de g√©n√©rer un article optimis√© pour le SEO qui soit engageant, √©ducatif et informatif, bas√© sur un sujet donn√©, une transcription vid√©o et des mots-cl√©s cibles.
Voici la transcription vid√©o √† utiliser comme r√©f√©rence :
<transcript>
{context}
</transcript>
Le sujet principal de l'article est :
<article_topic>
{article_topic}
</article_topic>
Et voici les mots-cl√©s cibles √† incorporer :
<target_keywords>
{keywords_input}
</target_keywords>
Avant de r√©diger l'article, veuillez planifier votre approche en suivant ces √©tapes. Encadrez votre planification avec les balises <article_planning> :

1. Analysez la transcription vid√©o et listez 3-5 points cl√©s pertinents pour le sujet de l'article. D√©terminez l'importance d'une partie par rapport √† la longueur du texte du transcript d√©di√© √† ce sujet.
2. √ânum√©rez les sections principales de l'article (au moins 3-5 sections).
3. Pour chaque section, d√©finissez 2-3 sous-th√®mes potentiels et notez comment int√©grer naturellement les mots-cl√©s.
4. Prenez en compte les besoins et les points sensibles du public cible (freelances fran√ßais √¢g√©s de 25-40 ans).
5. Proposez une accroche intrigante pour l'introduction.
6. R√©fl√©chissez √† 3 titres et m√©ta-descriptions potentiels int√©grant les mots-cl√©s.
7. Cr√©ez un bref plan de chaque section, en indiquant les placements possibles des mots-cl√©s.
Une fois la phase de planification termin√©e, r√©digez l'article en suivant ces directives :
8. Structure de l'article :
    - Ne pas fusionnez les sections principales de l'article, uniquement les sous-th√®mes
    - Commencez par une introduction engageante qui pr√©sente les points principaux.
    - Evitez le plus possible des listes √† puces, chaque partie doit contenir des phrases r√©dig√©es.
    - Divisez le contenu en sections logiques avec des titres clairs (H2, H3).
    - Concluez en r√©sumant les points cl√©s et en encourageant l'engagement du lecteur.
9. Optimisation SEO :
    - Incorporez naturellement les mots-cl√©s cibles, particuli√®rement dans le titre, les sous-titres et le premier paragraphe.
    - Utilisez des variations des mots-cl√©s et des termes associ√©s.
    - Incluez des liens internes et externes pertinents.
    - Cr√©ez une m√©ta-description et un titre optimis√©s pour un taux de clics √©lev√©.
10. Style d'√©criture :
    - Adoptez un ton d√©contract√© et conversationnel.
    - Partagez des conseils pratiques et des exemples concrets li√©s au freelancing.
    - Simplifiez les concepts complexes.
    - Tutoyez le lecteur.
    - Restez fid√®le √† la transcription de la vid√©o.
11. Qualit√© du contenu :
    - Assurez-vous que toutes les informations sont exactes et √† jour.
    - Abordez les d√©fis et questions courantes rencontr√©s par les freelances fran√ßais.
    - Offrez des perspectives uniques qui distinguent votre contenu.
12. Outro: En italique, ajoute √† la fin la phrase suivante: "Si tu veux que l'on discute de ton projet freelance, prends rendez-vous gratuitement avec moi pour que je t'accompagne personnellement". Faites en sorte que cette phrase s'enchaine bien avec la pr√©c√©dente avec une belle transition
Pr√©sentez votre article dans le format en markdown avec les sections d√©crites ci dessous:
Votre titre optimis√© pour le SEO ici
Votre m√©ta-description convaincante ici
Votre contenu d'article complet ici, structur√© avec les titres, paragraphes et la mise en forme appropri√©s.
N'oubliez pas de vous concentrer sur la cr√©ation de contenu qui est √† la fois informatif pour les lecteurs et optimis√© pour les moteurs de recherche.
Pensez √† faire un r√©sultat lisible sur chacun des √©l√©ments retourn√©s avec des espaces.
N'affichez pas la partie article_planning, elle doit juste vous aider √† r√©diger l'article
Affiche uniquement les trois propositions de titre / meta description puis l'article

Instructions particuli√®res de l'utilisateur :
{instructions}
'''
        with st.spinner("üîÑ G√©n√©ration de l'article en cours..."):
            article = generate_article(full_prompt)
        if article:
            st.success("‚úÖ Article g√©n√©r√© avec succ√®s !")
            st.subheader("üìÑ Article g√©n√©r√©")
            # Affichage structur√© avec titres H1/H2/H3
            import re
            lines = article.split('\n')
            for line in lines:
                if line.startswith('# '):
                    st.title(line[2:].strip())
                elif line.startswith('## '):
                    st.header(line[3:].strip())
                elif line.startswith('### '):
                    st.subheader(line[4:].strip())
                elif line.strip() == '':
                    st.markdown('&nbsp;')  # espace visuel
                else:
                    st.markdown(line)
            # Suppression du bouton de t√©l√©chargement PDF
            # (Aucun bouton de t√©l√©chargement n'est affich√©)
            st.subheader("üìä Statistiques")
            word_count = len(article.split())
            char_count = len(article)
            col_stats1, col_stats2, col_stats3 = st.columns(3)
            with col_stats1:
                st.metric("Mots", word_count)
            with col_stats2:
                st.metric("Caract√®res", char_count)
            with col_stats3:
                st.metric("Mots-cl√©s fournis", len(keywords_input.split('\n')) if keywords_input else 0)
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: #666;'>"
        "G√©n√©rateur d'Articles SEO - Propuls√© par Gemini AI"
        "</div>",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main() 
